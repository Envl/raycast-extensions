# Auto-labels PRs "Approved" on non-maintainer approvals.
# Skips write+/maintain/admin users to highlight community reviews.
# Handles bots/externals/404s/none as allowable; only for open PRs.
# Edge: API errors fail the step so maintainers can act; transient network issues are retried.

name: Auto-label approved PRs (external reviewers only)

on:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write

jobs:
  label_on_approval:
    runs-on: ubuntu-latest
    if: |
      github.event.review.state == 'approved' &&
      github.event.pull_request.state == 'open'
    steps:
      - name: Show basic event info
        run: |
          echo "Event sender: ${{ github.event.sender.login }}"
          echo "Review author: ${{ github.event.review.user.login }}"
          echo "PR head repo: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "PR base repo: ${{ github.event.pull_request.base.repo.full_name }}"
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "Note: PR head is from a fork or different repo"
          else
            echo "Note: PR head is in the same repository"
          fi

      - name: Check reviewer permissions
        id: check_permissions
        uses: actions/github-script@v7
        with:
          script: |
            const reviewer = context.payload.review.user;
            console.log(`Reviewer: ${reviewer.login}, Type: ${reviewer.type}`);
            if (reviewer.type !== 'User') {
              console.log('Non-human reviewer: Will add label');
              return 'label';
            }
            try {
              const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: reviewer.login
              });
              const permission = collaborator.permission;
              console.log(`User permission: ${permission}`);
              if (['read', 'triage', 'none'].includes(permission)) {
                console.log(`Will add label for ${permission} user`);
                return 'label';
              } else {
                console.log(`Will skip label for ${permission} user`);
                return 'skip';
              }
            } catch (error) {
              if (error.status === 404) {
                console.log('User is not a collaborator: Will add label');
                return 'label';
              } else {
                console.log(`Permission check error: ${error.message}`);
                return 'skip';
              }
            }
          result-encoding: string

      - name: Set effective token (fallback if secret is not set)
        run: |
          if [ -n "${{ secrets.RAYCAST_BOT_API_ACCESS_TOKEN }}" ]; then
            echo "EFFECTIVE_TOKEN=${{ secrets.RAYCAST_BOT_API_ACCESS_TOKEN }}" >> "$GITHUB_ENV"
          else
            echo "EFFECTIVE_TOKEN=${{ github.token }}" >> "$GITHUB_ENV"
          fi

      - name: Add "Approved" label
        if: steps.check_permissions.outputs.result == 'label'
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.EFFECTIVE_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const label = "Approved";
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: [label],
              });
              console.log(`✅ Label '${label}' added to PR #${prNumber}`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`ℹ️ Label '${label}' already exists on PR #${prNumber}`);
              } else {
                console.log(`❌ Failed to add label: ${error.message}`);
                throw error;
              }
            }
